package Challenge;
import java.io.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Queue;

public class Solution {
	public static int[] result;
	public static Queue<subContRange> queueInc = new PriorityQueue<subContRange>();
    public static Queue<subContRange> queueDec = new PriorityQueue<subContRange>();
    public static Queue<subContRange> queueRem = new PriorityQueue<subContRange>();
	public static HashMap<Integer, Integer> sumSubArray= new HashMap<Integer, Integer>();
	public static subContRange first; 
	public static subContRange last; 
	public static LinkedList<subContRange> windowMiddle = new LinkedList<subContRange>();
	public static int N,K;

	/* Find all subContRanges and store them into queueInc and queueDec */
    public static void findLength(int[] nums) {
        if (nums == null || nums.length == 0) {
        	return ;
        }
        int n = nums.length;
        int[] dpInc = new int[n];
        int[] dpDec = new int[n];    
        int[] dpRem = new int[n];
        dpInc[0] = 1; dpDec[0] = 1;dpRem[0] = 1;
        int startInc = 0; int endInc = 0; int startDec = 0; int endDec = 0;int startRem = 0; int endRem = 0;
        boolean StateInc = false;	// whether the last element is in an increasing subContRange
        boolean StateDec = false;	// whether the last element is in an decreasing subContRange
        boolean StateRem = false;	// whether the last element is in an decreasing subContRange
        for (int i = 1; i < n; i++) {
        	/* take care of the last subContRange
        	 * including the situation if it is end of two same elements
        	*/
        	if (i == n-1 ){
        		if (nums[i] > nums[i - 1] || StateInc && !StateDec && !StateRem) { queueInc.add(new subContRange(startInc, i, Inc)); }
        		if (nums[i] < nums[i - 1] || !StateInc && StateDec && !StateRem) { queueDec.add(new subContRange(startDec, i, Dec)); }
        		if (nums[i] == nums[i - 1] || !StateInc && !StateDec && StateRem) { queueDec.add(new subContRange(startDec, i, Rem)); }
        	}
            if (nums[i] > nums[i - 1]) {
            	StateInc = true;
                dpInc[i] = dpInc[i - 1] + 1;
                dpDec[i] = 1;
                dpRem[i] = 1;
                if (dpDec[i - 1] != 1) {  
                	endDec = i - 1;
                	StateDec = false;
                	queueDec.add(new subContRange(startDec, endDec, Inc));
                }
                if (dpRem[i - 1] != 1) {
                	endRem = i - 1;
					StateRem = false;
					queueRem.add(new subContRange(startRem, endRem, Rem));
                }            	                	          	
            	startInc = i - 1;
                }
            }
            else if (nums[i] < nums[i - 1]){
            	StateDec = true;
            	dpDec[i] = dpDec[i - 1] + 1;
                dpInc[i] = 1;
                dpRem[i] = 1;
                if (dpInc[i - 1] != 1){
                	endInc = i - 1;
                	StateInc = false;
                	queueInc.add(new subContRange(startInc, endInc, Inc));
                }
                if (dpRem[i - 1] != 1) {	
                	endRem = i - 1;
					StateRem = false;
					queueRem.add(new subContRange(startRem, endRem, Rem)); 
                }                
                startDec = i - 1;
            	              
            }
            /* the following element is the same as the previous one */
            else {
            	StateRem = true;
            	dpRem[i] = dpRem[i - 1] + 1;
                dpInc[i] = 1;
                dpDec[i] = 1;
                if (dpInc[i - 1] != 1){
                	endInc = i - 1;
                	StateInc = false;
                	queueInc.add(new subContRange(startInc, endInc, Inc));
                }                
                if (dpDec[i - 1] != 1) {  
                	endDec = i - 1;
                	StateDec = false;
                	queueDec.add(new subContRange(startDec, endDec, Dec));
                }
                startRem = i - 1;               
            }
        }        
        System.out.println("check it");
    }

	public static int[] findPattern(int n, int k, int[] price){
		N = n; K = k;
		findLength(price);
		
	}
}